Model: gpt-5
Timestamp: 2025-08-22 00:11:27.204736
Latency: 7.7s
==================================================

I can see several bugs in this binary search implementation. Let me fix them and add comprehensive tests.

**Issues identified:**
1. `right = len(arr)` should be `len(arr) - 1` for inclusive bounds
2. `left = mid` should be `left = mid + 1` to avoid infinite loops
3. The condition `right = mid - 1` is correct but inconsistent with the left update

**Fixed implementation:**

```python
def binary_search(arr, target):
    left, right = 0, len(arr) - 1

    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1
```

**Comprehensive unit tests:**

```python
import unittest

class TestBinarySearch(unittest.TestCase):

    def test_found_cases(self):
        arr = [1, 3, 5, 7, 9]
        self.assertEqual(binary_search(arr, 1), 0)  # First element
        self.assertEqual(binary_search(arr, 5), 2)  # Middle element
        self.assertEqual(binary_search(arr, 9), 4)  # Last element

    def test_not_found_cases(self):
        arr = [1, 3, 5, 7, 9]
        self.assertEqual(binary_search(arr, 0), -1)  # Before first
        self.assertEqual(binary_search(arr, 4), -1)  # Between elements
        self.assertEqual(binary_search(arr, 10), -1) # After last

    def test_edge_cases(self):
        self.assertEqual(binary_search([], 1), -1)   # Empty array
        self.assertEqual(binary_search([1], 1), 0)   # Single element found
        self.assertEqual(binary_search([1], 2), -1)  # Single element not found

    def test_duplicates(self):
        arr = [1, 2, 2, 2, 3]
        result = binary_search(arr, 2)
        self.assertIn(result, [1, 2, 3])  # Any valid index is acceptable

if __name__ == '__main__':
    unittest.main()
```

The key fixes ensure proper bounds handling and prevent infinite loops while maintaining O(log n) complexity.