{
  "id": "002",
  "domain": "coding_debugging",
  "difficulty": "medium",
  "title": "Binary Search Bug Fix",
  "prompt": "Fix the bug in this binary search implementation and add comprehensive unit tests:\n\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr)\n    \n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid\n        else:\n            right = mid - 1\n    \n    return -1\n```",
  "expected_issues": [
    "right should be len(arr) - 1",
    "left = mid should be left = mid + 1",
    "Infinite loop potential"
  ],
  "correct_implementation": "Fixed version with proper bounds",
  "evaluation_criteria": {
    "task_success": "Code runs without infinite loops and finds targets correctly",
    "unit_test_coverage": "Tests for found/not found, edge cases, empty array",
    "bug_identification": "Correctly identifies the specific issues",
    "code_quality": "Clean, readable implementation"
  },
  "test_cases": [
    {"arr": [1, 3, 5, 7, 9], "target": 5, "expected": 2},
    {"arr": [1, 3, 5, 7, 9], "target": 1, "expected": 0},
    {"arr": [1, 3, 5, 7, 9], "target": 9, "expected": 4},
    {"arr": [1, 3, 5, 7, 9], "target": 4, "expected": -1},
    {"arr": [], "target": 1, "expected": -1},
    {"arr": [1], "target": 1, "expected": 0}
  ],
  "tags": ["debugging", "algorithms", "binary_search", "unit_testing"]
}
